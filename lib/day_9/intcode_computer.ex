defmodule Advent.Day9.Intcode do
  @moduledoc """
  Day 9
  """

  alias Advent.Math

  def solve_1() do
    program = [
      1102,
      34_463_338,
      34_463_338,
      63,
      1007,
      63,
      34_463_338,
      63,
      1005,
      63,
      53,
      1102,
      3,
      1,
      1000,
      109,
      988,
      209,
      12,
      9,
      1000,
      209,
      6,
      209,
      3,
      203,
      0,
      1008,
      1000,
      1,
      63,
      1005,
      63,
      65,
      1008,
      1000,
      2,
      63,
      1005,
      63,
      904,
      1008,
      1000,
      0,
      63,
      1005,
      63,
      58,
      4,
      25,
      104,
      0,
      99,
      4,
      0,
      104,
      0,
      99,
      4,
      17,
      104,
      0,
      99,
      0,
      0,
      1101,
      0,
      31,
      1019,
      1101,
      25,
      0,
      1008,
      1102,
      35,
      1,
      1009,
      1102,
      422,
      1,
      1029,
      1102,
      1,
      21,
      1005,
      1102,
      1,
      734,
      1027,
      1102,
      29,
      1,
      1000,
      1101,
      32,
      0,
      1018,
      1102,
      28,
      1,
      1016,
      1101,
      0,
      38,
      1015,
      1101,
      0,
      378,
      1023,
      1101,
      30,
      0,
      1017,
      1102,
      1,
      381,
      1022,
      1101,
      0,
      37,
      1006,
      1102,
      1,
      1,
      1021,
      1101,
      0,
      24,
      1011,
      1102,
      1,
      23,
      1002,
      1101,
      0,
      0,
      1020,
      1101,
      0,
      20,
      1007,
      1101,
      427,
      0,
      1028,
      1101,
      26,
      0,
      1014,
      1101,
      27,
      0,
      1010,
      1101,
      0,
      39,
      1001,
      1101,
      34,
      0,
      1012,
      1102,
      1,
      36,
      1013,
      1101,
      0,
      33,
      1003,
      1101,
      804,
      0,
      1025,
      1101,
      737,
      0,
      1026,
      1102,
      1,
      809,
      1024,
      1102,
      1,
      22,
      1004,
      109,
      9,
      1201,
      -7,
      0,
      63,
      1008,
      63,
      20,
      63,
      1005,
      63,
      205,
      1001,
      64,
      1,
      64,
      1106,
      0,
      207,
      4,
      187,
      1002,
      64,
      2,
      64,
      109,
      2,
      21102,
      40,
      1,
      1,
      1008,
      1012,
      40,
      63,
      1005,
      63,
      233,
      4,
      213,
      1001,
      64,
      1,
      64,
      1106,
      0,
      233,
      1002,
      64,
      2,
      64,
      109,
      4,
      1208,
      -7,
      25,
      63,
      1005,
      63,
      255,
      4,
      239,
      1001,
      64,
      1,
      64,
      1106,
      0,
      255,
      1002,
      64,
      2,
      64,
      109,
      -24,
      1207,
      10,
      38,
      63,
      1005,
      63,
      271,
      1105,
      1,
      277,
      4,
      261,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      25,
      21107,
      41,
      40,
      -3,
      1005,
      1013,
      293,
      1105,
      1,
      299,
      4,
      283,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      5,
      1205,
      -1,
      311,
      1106,
      0,
      317,
      4,
      305,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -23,
      1202,
      6,
      1,
      63,
      1008,
      63,
      22,
      63,
      1005,
      63,
      339,
      4,
      323,
      1105,
      1,
      343,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      1,
      2101,
      0,
      2,
      63,
      1008,
      63,
      37,
      63,
      1005,
      63,
      367,
      1001,
      64,
      1,
      64,
      1106,
      0,
      369,
      4,
      349,
      1002,
      64,
      2,
      64,
      109,
      29,
      2105,
      1,
      -5,
      1106,
      0,
      387,
      4,
      375,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -26,
      2101,
      0,
      0,
      63,
      1008,
      63,
      23,
      63,
      1005,
      63,
      409,
      4,
      393,
      1106,
      0,
      413,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      26,
      2106,
      0,
      0,
      4,
      419,
      1106,
      0,
      431,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -17,
      21108,
      42,
      42,
      6,
      1005,
      1017,
      453,
      4,
      437,
      1001,
      64,
      1,
      64,
      1106,
      0,
      453,
      1002,
      64,
      2,
      64,
      109,
      7,
      21101,
      43,
      0,
      -8,
      1008,
      1010,
      44,
      63,
      1005,
      63,
      477,
      1001,
      64,
      1,
      64,
      1105,
      1,
      479,
      4,
      459,
      1002,
      64,
      2,
      64,
      109,
      -7,
      1206,
      10,
      495,
      1001,
      64,
      1,
      64,
      1106,
      0,
      497,
      4,
      485,
      1002,
      64,
      2,
      64,
      109,
      -5,
      2108,
      36,
      0,
      63,
      1005,
      63,
      513,
      1106,
      0,
      519,
      4,
      503,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      3,
      2102,
      1,
      -5,
      63,
      1008,
      63,
      22,
      63,
      1005,
      63,
      541,
      4,
      525,
      1105,
      1,
      545,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      3,
      1207,
      -6,
      38,
      63,
      1005,
      63,
      567,
      4,
      551,
      1001,
      64,
      1,
      64,
      1105,
      1,
      567,
      1002,
      64,
      2,
      64,
      109,
      -15,
      2107,
      20,
      8,
      63,
      1005,
      63,
      585,
      4,
      573,
      1106,
      0,
      589,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -1,
      1208,
      5,
      36,
      63,
      1005,
      63,
      609,
      1001,
      64,
      1,
      64,
      1106,
      0,
      611,
      4,
      595,
      1002,
      64,
      2,
      64,
      109,
      30,
      21101,
      44,
      0,
      -7,
      1008,
      1019,
      44,
      63,
      1005,
      63,
      633,
      4,
      617,
      1106,
      0,
      637,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -25,
      1201,
      0,
      0,
      63,
      1008,
      63,
      39,
      63,
      1005,
      63,
      659,
      4,
      643,
      1105,
      1,
      663,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      27,
      1206,
      -8,
      677,
      4,
      669,
      1106,
      0,
      681,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -28,
      2108,
      29,
      0,
      63,
      1005,
      63,
      703,
      4,
      687,
      1001,
      64,
      1,
      64,
      1106,
      0,
      703,
      1002,
      64,
      2,
      64,
      109,
      5,
      21107,
      45,
      46,
      7,
      1005,
      1012,
      725,
      4,
      709,
      1001,
      64,
      1,
      64,
      1106,
      0,
      725,
      1002,
      64,
      2,
      64,
      109,
      30,
      2106,
      0,
      -8,
      1105,
      1,
      743,
      4,
      731,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -22,
      21102,
      46,
      1,
      4,
      1008,
      1017,
      44,
      63,
      1005,
      63,
      767,
      1001,
      64,
      1,
      64,
      1105,
      1,
      769,
      4,
      749,
      1002,
      64,
      2,
      64,
      109,
      -15,
      1202,
      10,
      1,
      63,
      1008,
      63,
      23,
      63,
      1005,
      63,
      793,
      1001,
      64,
      1,
      64,
      1106,
      0,
      795,
      4,
      775,
      1002,
      64,
      2,
      64,
      109,
      19,
      2105,
      1,
      7,
      4,
      801,
      1105,
      1,
      813,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      6,
      1205,
      -2,
      827,
      4,
      819,
      1106,
      0,
      831,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -20,
      2107,
      22,
      2,
      63,
      1005,
      63,
      851,
      1001,
      64,
      1,
      64,
      1106,
      0,
      853,
      4,
      837,
      1002,
      64,
      2,
      64,
      109,
      20,
      21108,
      47,
      44,
      -8,
      1005,
      1015,
      869,
      1105,
      1,
      875,
      4,
      859,
      1001,
      64,
      1,
      64,
      1002,
      64,
      2,
      64,
      109,
      -22,
      2102,
      1,
      4,
      63,
      1008,
      63,
      23,
      63,
      1005,
      63,
      899,
      1001,
      64,
      1,
      64,
      1106,
      0,
      901,
      4,
      881,
      4,
      64,
      99,
      21101,
      0,
      27,
      1,
      21102,
      915,
      1,
      0,
      1106,
      0,
      922,
      21201,
      1,
      28703,
      1,
      204,
      1,
      99,
      109,
      3,
      1207,
      -2,
      3,
      63,
      1005,
      63,
      964,
      21201,
      -2,
      -1,
      1,
      21101,
      0,
      942,
      0,
      1106,
      0,
      922,
      22101,
      0,
      1,
      -1,
      21201,
      -2,
      -3,
      1,
      21101,
      957,
      0,
      0,
      1105,
      1,
      922,
      22201,
      1,
      -1,
      -2,
      1105,
      1,
      968,
      21201,
      -2,
      0,
      -2,
      109,
      -3,
      2105,
      1,
      0
    ]

    run_program(program)
  end

  def run_program([99 | _tail] = program, _relative_base, _external_memory) do
    program
  end

  def run_program(program) do
    run_program(program, program, 0, [])
  end

  def run_program(program, [99 | _tail], _relative_base, _external_memory) do
    program
  end

  def run_program(
        program,
        [3 | [parameter | tail]],
        relative_base,
        external_memory
      ) do
    input = IO.gets("Input: ")
    {value, _} = Integer.parse(input)

    {before_pos, [_discard | after_pos]} = Enum.split(program, parameter)

    program = before_pos ++ [value] ++ after_pos
    move_pointer_and_run_program(program, tail, relative_base, external_memory)
  end

  def run_program(
        program,
        [4 | [parameter | tail]],
        relative_base,
        external_memory
      ) do
    value = Enum.at(program, parameter)
    output_to_term("Output: #{value}")
    move_pointer_and_run_program(program, tail, relative_base, external_memory)
  end

  def run_program(
        program,
        [instruction | tail],
        relative_base,
        external_memory
      ) do
    op_code = rem(instruction, 100)

    # IO.inspect(instruction)

    instruction_digits = Integer.digits(instruction)

    instruction_digits =
      case length(instruction_digits) do
        4 ->
          instruction_digits

        _ ->
          case op_code == 1 or op_code == 2 or op_code == 6 or op_code == 5 or op_code == 7 or
                 op_code == 8 do
            true ->
              leading_zeros =
                case 4 - length(instruction_digits) > 0 do
                  true ->
                    List.duplicate(0, 4 - length(instruction_digits))

                  false ->
                    []
                end

              leading_zeros ++ instruction_digits

            false ->
              instruction_digits
          end
      end

    values =
      instruction_digits
      |> Enum.reverse()
      |> Enum.drop(2)
      |> Enum.with_index()
      |> Enum.map(fn {mode, index} ->
        case op_code do
          3 ->
            Enum.at(tail, index) + relative_base

          _ ->

            case mode == 2 and index == 2 do
              true -> Enum.at(tail, index) + relative_base
              false ->
                get_value(mode, Enum.at(tail, index), program, relative_base, external_memory)
            end
        end
      end)

    case op_code do
      9 ->
        case values do
          [] ->
            [head | tail] = tail

            value = get_value(0, head, program, relative_base, external_memory)
            relative_base = process_values(9, [value], relative_base)
            move_pointer_and_run_program(program, tail, relative_base, external_memory)

          _ ->
            relative_base = process_values(9, values, relative_base)
            {_head, tail} = Enum.split(tail, length(values))
            move_pointer_and_run_program(program, tail, relative_base, external_memory)
        end

      5 ->
        case Enum.at(values, 0) do
          0 ->
            [_v1 | [_v2 | tail]] = tail
            move_pointer_and_run_program(program, tail, relative_base, external_memory)

          _ ->
            {_before_pos, tail} = Enum.split(program, Enum.at(values, 1))
            move_pointer_and_run_program(program, tail, relative_base, external_memory)
        end

      6 ->
        case Enum.at(values, 0) do
          0 ->
            {_before_pos, tail} = Enum.split(program, Enum.at(values, 1))
            move_pointer_and_run_program(program, tail, relative_base, external_memory)

          _ ->
            [_v1 | [_v2 | tail]] = tail
            move_pointer_and_run_program(program, tail, relative_base, external_memory)
        end

      3 ->
        input = IO.gets("Input: ")
        {value_from_input, _} = Integer.parse(input)
        [insert_pos] = values

        [_param | tail] = tail

        case insert_pos >= length(program) do
          true ->
            case insert_pos >= length(external_memory) do
              true ->
                pad = insert_pos - length(external_memory)

                external_memory = external_memory ++ List.duplicate(0, pad) ++ [value_from_input]

                move_pointer_and_run_program(program, tail, relative_base, external_memory)

              false ->
                {before_pos, [_discard | after_pos]} = Enum.split(external_memory, insert_pos)

                external_memory = before_pos ++ [value_from_input] ++ after_pos

                move_pointer_and_run_program(program, tail, relative_base, external_memory)
            end

          false ->
            {before_pos, [_discard | after_pos]} = Enum.split(program, insert_pos)

            program = before_pos ++ [value_from_input] ++ after_pos

            move_pointer_and_run_program(program, tail, relative_base, external_memory)
        end

      _ ->
        # IO.inspect(op_code)
        # IO.inspect(values, charlists: :as_lists)

        case process_values(op_code, values) do
          nil ->
            {_head, tail} = Enum.split(tail, length(values))
            move_pointer_and_run_program(program, tail, relative_base, external_memory)

          {result, insert_pos} ->
            #insert_pos = get_value(2, insert_pos, program, relative_base, external_memory)
            # IO.inspect(tail)

            {_head, tail} = Enum.split(tail, length(values))
            # IO.inspect(tail)

            case Enum.split(program, insert_pos) do
              {before_pos, [_discard | after_pos]} ->
                {before_pos, after_pos}
                # IO.inspect(result)
                program = before_pos ++ [result] ++ after_pos
                move_pointer_and_run_program(program, tail, relative_base, external_memory)

              {_before_pos, []} ->
                case insert_pos >= length(external_memory) do
                  true ->
                    pad = insert_pos - length(external_memory)
                    external_memory = external_memory ++ List.duplicate(0, pad) ++ [result]
                    move_pointer_and_run_program(program, tail, relative_base, external_memory)

                  false ->
                    {before_pos, [_discard | after_pos]} = Enum.split(external_memory, insert_pos)
                    external_memory = before_pos ++ [result] ++ after_pos
                    move_pointer_and_run_program(program, tail, relative_base, external_memory)
                end
            end

          result ->
            insert_pos_digit_index =
              instruction_digits
              |> length
              |> Kernel.-(2)

            insert_pos = Enum.at(tail, insert_pos_digit_index)

            {_head, tail} = Enum.split(tail, length(values) + 1)

            case Enum.split(program, insert_pos) do
              {before_pos, [_discard | after_pos]} ->
                {before_pos, after_pos}
                program = before_pos ++ [result] ++ after_pos
                move_pointer_and_run_program(program, tail, relative_base, external_memory)

              {_before_pos, []} ->
                case insert_pos >= length(external_memory) do
                  true ->
                    pad = insert_pos - length(external_memory)
                    external_memory = external_memory ++ List.duplicate(0, pad) ++ [result]
                    move_pointer_and_run_program(program, tail, relative_base, external_memory)

                  false ->
                    {before_pos, [_discard | after_pos]} = Enum.split(external_memory, insert_pos)
                    external_memory = before_pos ++ [result] ++ after_pos
                    move_pointer_and_run_program(program, tail, relative_base, external_memory)
                end
            end
        end
    end
  end

  def get_value(0 = _mode, param, program, _relative_base, external_memory) do
    case param >= length(program) do
      false ->
        Enum.at(program, param)

      true ->
        case Enum.at(external_memory, param) do
          nil ->
            0

          value ->
            value
        end
    end
  end

  # immediate mode
  def get_value(1 = _mode, param, _program, _relative_base, _external_memory) do
    param
  end

  def get_value(2 = _mode, param, program, relative_base, external_memory) do
    loc = relative_base + param

    case loc >= length(program) do
      false ->
        Enum.at(program, loc)

      true ->
        case Enum.at(external_memory, loc) do
          nil ->
            0

        value ->
            value
        end
    end
  end

  def move_pointer_and_run_program(program, tail, relative_base, external_memory) do
    remaining_program = Enum.take(program, length(tail) * -1)

    run_program(program, remaining_program, relative_base, external_memory)
  end

  def process_values(1, values) when length(values) == 2 do
    Math.sum_list(values)
  end

  def process_values(1, [value_1, value_2, insert_pos]) do
    result = Math.sum_list([value_1, value_2])

    {result, insert_pos}
  end

  def process_values(2, [v1 | [v2 | [insert_index]]] = values) when length(values) > 2 do
    result = Math.multiply_list([v1, v2])

    {result, insert_index}
  end

  def process_values(2, values) do
    Math.multiply_list(values)
  end

  def process_values(4, [value]) do
    output_to_term("Output: #{value}")
    nil
  end

  def process_values(9, [value], relative_base) do
    relative_base + value
  end

  def process_values(8 = _op_code, [value_1, value_2]) do
    case value_1 == value_2 do
      true ->
        1
      false ->
        0
    end
  end

  def process_values(8 = _op_code, [value_1, value_2, insert_pos]) do
    result =
      case value_1 == value_2 do
        true ->
          1
        false ->
          0
      end

    {result, insert_pos}
  end

  def process_values(7 = _op_code, [value_1, value_2]) do
    case value_1 < value_2 do
      true ->
        1

      false ->
        0
    end
  end

  def process_values(7 = _op_code, [value_1, value_2, insert_pos]) do
    result =
      case value_1 < value_2 do
        true ->
          1

        false ->
          0
      end

    {result, insert_pos}
  end

  def output_to_term(arg) do
    IO.puts(IO.ANSI.format([:yellow_background, :black, inspect(arg)]))
  end

  def solve_puzzle_1() do
    inputs = [
      3,
      225,
      1,
      225,
      6,
      6,
      1100,
      1,
      238,
      225,
      104,
      0,
      1102,
      16,
      13,
      225,
      1001,
      88,
      68,
      224,
      101,
      -114,
      224,
      224,
      4,
      224,
      1002,
      223,
      8,
      223,
      1001,
      224,
      2,
      224,
      1,
      223,
      224,
      223,
      1101,
      8,
      76,
      224,
      101,
      -84,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      101,
      1,
      224,
      224,
      1,
      224,
      223,
      223,
      1101,
      63,
      58,
      225,
      1102,
      14,
      56,
      224,
      101,
      -784,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      101,
      4,
      224,
      224,
      1,
      223,
      224,
      223,
      1101,
      29,
      46,
      225,
      102,
      60,
      187,
      224,
      101,
      -2340,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      101,
      3,
      224,
      224,
      1,
      224,
      223,
      223,
      1102,
      60,
      53,
      225,
      1101,
      50,
      52,
      225,
      2,
      14,
      218,
      224,
      101,
      -975,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      1001,
      224,
      3,
      224,
      1,
      223,
      224,
      223,
      1002,
      213,
      79,
      224,
      101,
      -2291,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      1001,
      224,
      2,
      224,
      1,
      223,
      224,
      223,
      1,
      114,
      117,
      224,
      101,
      -103,
      224,
      224,
      4,
      224,
      1002,
      223,
      8,
      223,
      101,
      4,
      224,
      224,
      1,
      224,
      223,
      223,
      1101,
      39,
      47,
      225,
      101,
      71,
      61,
      224,
      101,
      -134,
      224,
      224,
      4,
      224,
      102,
      8,
      223,
      223,
      101,
      2,
      224,
      224,
      1,
      224,
      223,
      223,
      1102,
      29,
      13,
      225,
      1102,
      88,
      75,
      225,
      4,
      223,
      99,
      0,
      0,
      0,
      677,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1105,
      0,
      99999,
      1105,
      227,
      247,
      1105,
      1,
      99999,
      1005,
      227,
      99999,
      1005,
      0,
      256,
      1105,
      1,
      99999,
      1106,
      227,
      99999,
      1106,
      0,
      265,
      1105,
      1,
      99999,
      1006,
      0,
      99999,
      1006,
      227,
      274,
      1105,
      1,
      99999,
      1105,
      1,
      280,
      1105,
      1,
      99999,
      1,
      225,
      225,
      225,
      1101,
      294,
      0,
      0,
      105,
      1,
      0,
      1105,
      1,
      99999,
      1106,
      0,
      300,
      1105,
      1,
      99999,
      1,
      225,
      225,
      225,
      1101,
      314,
      0,
      0,
      106,
      0,
      0,
      1105,
      1,
      99999,
      1107,
      677,
      677,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      329,
      1001,
      223,
      1,
      223,
      108,
      677,
      677,
      224,
      1002,
      223,
      2,
      223,
      1005,
      224,
      344,
      101,
      1,
      223,
      223,
      1008,
      226,
      226,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      359,
      1001,
      223,
      1,
      223,
      1107,
      226,
      677,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      374,
      1001,
      223,
      1,
      223,
      8,
      677,
      226,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      389,
      101,
      1,
      223,
      223,
      8,
      226,
      226,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      404,
      101,
      1,
      223,
      223,
      7,
      677,
      677,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      419,
      101,
      1,
      223,
      223,
      7,
      677,
      226,
      224,
      1002,
      223,
      2,
      223,
      1005,
      224,
      434,
      101,
      1,
      223,
      223,
      1108,
      677,
      226,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      449,
      1001,
      223,
      1,
      223,
      108,
      677,
      226,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      464,
      101,
      1,
      223,
      223,
      1108,
      226,
      677,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      479,
      101,
      1,
      223,
      223,
      1007,
      677,
      677,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      494,
      1001,
      223,
      1,
      223,
      107,
      226,
      226,
      224,
      102,
      2,
      223,
      223,
      1005,
      224,
      509,
      1001,
      223,
      1,
      223,
      1008,
      677,
      226,
      224,
      102,
      2,
      223,
      223,
      1005,
      224,
      524,
      1001,
      223,
      1,
      223,
      1007,
      226,
      226,
      224,
      102,
      2,
      223,
      223,
      1006,
      224,
      539,
      101,
      1,
      223,
      223,
      1108,
      677,
      677,
      224,
      102,
      2,
      223,
      223,
      1005,
      224,
      554,
      1001,
      223,
      1,
      223,
      1008,
      677,
      677,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      569,
      101,
      1,
      223,
      223,
      1107,
      677,
      226,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      584,
      1001,
      223,
      1,
      223,
      7,
      226,
      677,
      224,
      102,
      2,
      223,
      223,
      1005,
      224,
      599,
      101,
      1,
      223,
      223,
      108,
      226,
      226,
      224,
      1002,
      223,
      2,
      223,
      1005,
      224,
      614,
      101,
      1,
      223,
      223,
      107,
      226,
      677,
      224,
      1002,
      223,
      2,
      223,
      1005,
      224,
      629,
      1001,
      223,
      1,
      223,
      107,
      677,
      677,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      644,
      101,
      1,
      223,
      223,
      1007,
      677,
      226,
      224,
      1002,
      223,
      2,
      223,
      1006,
      224,
      659,
      101,
      1,
      223,
      223,
      8,
      226,
      677,
      224,
      102,
      2,
      223,
      223,
      1005,
      224,
      674,
      1001,
      223,
      1,
      223,
      4,
      223,
      99,
      226
    ]

    run_program(inputs)
  end
end
